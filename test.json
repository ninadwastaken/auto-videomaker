[
    {
        "subreddit": "Python",
        "text": "# Weekly Thread: What's Everyone Working On This Week? \ud83d\udee0\ufe0f\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! \ud83c\udf1f"
    },
    {
        "subreddit": "Python",
        "text": "# Weekly Thread: Meta Discussions and Free Talk Friday \ud83c\udf99\ufe0f\n\nWelcome to Free Talk Friday on /r/Python! This is the place to discuss the r/Python community (meta discussions), Python news, projects, or anything else Python-related!\n\n## How it Works:\n\n1. **Open Mic**: Share your thoughts, questions, or anything you'd like related to Python or the community.\n2. **Community Pulse**: Discuss what you feel is working well or what could be improved in the /r/python community.\n3. **News &amp; Updates**: Keep up-to-date with the latest in Python and share any news you find interesting.\n\n## Guidelines:\n\n* All topics should be related to Python or the /r/python community.\n* Be respectful and follow Reddit's [Code of Conduct](https://www.redditinc.com/policies/content-policy).\n\n## Example Topics:\n\n1. **New Python Release**: What do you think about the new features in Python 3.11?\n2. **Community Events**: Any Python meetups or webinars coming up?\n3. **Learning Resources**: Found a great Python tutorial? Share it here!\n4. **Job Market**: How has Python impacted your career?\n5. **Hot Takes**: Got a controversial Python opinion? Let's hear it!\n6. **Community Ideas**: Something you'd like to see us do? tell us.\n\nLet's keep the conversation going. Happy discussing! \ud83c\udf1f"
    },
    {
        "subreddit": "Python",
        "text": "As some of you may know, \"**The Python Mega Course: Build 10 Real World Applications**\" is one of the top Python courses on Udemy. Last year, I made that version of the course available for free to the Reddit community, and I am doing the same today. \n\n In 2023, the course attracted 20,000+ students and collected 900+ reviews, achieving an exceptionally high average rating of 4.8/5 on Udemy. This makes the course exceptionally highly rated on Udemy.\n\n**How can you get the course for free today?**\n\nThree simple steps:\n\n1. Login to Udemy.\n2. Go to the course page: [https://udemy.com/course/former-python-mega-course-build-10-real-world-applications/](https://udemy.com/course/former-python-mega-course-build-10-real-world-applications/)\n3. Enter the password **mega\\_course** to get the course for free.\n\nThanks and have a relaxing end of the year!"
    },
    {
        "subreddit": "Python",
        "text": "I have a program on the internet that users pay to download and use. I'm thinking about adding a free trial, but I'm very concerned that users can simply download the trial and bypass the restrictions. The program is fully offline and somewhat simple. It's not like you need an entire team to crack it.\n\nIn fact, there is literally a pyinstaller unpacker out there that can revert the EXE straight back to its python source code. I use pyinstaller.\n\nAnything I can do? One thing to look out for is unpackers, and the other thing is how to make it difficult for Ghidra for example to reverse the program.\n\nEdit: to clarify, I can't just offer this as an online service/program because it requires interaction with the user's system. "
    },
    {
        "subreddit": "Python",
        "text": "Hello,\n\nI wanted to share a new Python project I've been working on called Jake. It's an alternative to popular link aggregator services like Linktree and OneLink. Jake leverages the power of GitHub Pages to provide you with a hassle-free way to create your one-link website. The best part? It won't cost you a dime!\n\nWith Jake, you can easily showcase all your important links and content in one central hub, neatly organized and easily accessible. Your website will have a sleek URL in the format of \"username.github.io,\" giving it a professional touch.\n\nJake is completely written in Python and uses the \\`tinyhtml\\` library to generate static HTML websites. Simply fill in the \\`data.toml\\` file with your information, and Jake will automatically build and deploy your website to GitHub Pages using a GitHub action.\n\nTo give you a taste of what Jake can do, I've prepared a demo project for you to explore. Just visit [https://thevahidal.github.io/jake](https://thevahidal.github.io/jake) and see the potential for yourself.\n\nIf you're interested in contributing or want to dive deeper into the project, you can find the Jake repository on GitHub at [https://github.com/thevahidal/jake](https://github.com/thevahidal/jake). I welcome all contributions, feedback, and bug reports. Your input will help shape the future of Jake and make it even better.\n\nThank you for taking the time to read about Jake. I can't wait to see what we can achieve together.\n\nBest regards,  \nAl"
    },
    {
        "subreddit": "Python",
        "text": "[https://github.com/ValdonVitija/crap](https://github.com/ValdonVitija/crap)\n\nAutomatically clear redundant packages from virtual environments in python \ud83d\udc0d\ud83d\udce6\ud83d\uddd1\ufe0f."
    },
    {
        "subreddit": "Python",
        "text": "The number of colormaps matplotlib felt limiting to me so I created a web app and Python package to customize existing colormaps or start from scratch!\n\n    from tastymap import cook_tmap\n    tmap = cook_tmap(\n        [\"red\", \"green\", \"blue\"], num_colors=256, reverse=True\n    )\n\nInstall by: \\`pip install tastymap\\` or try it online here: [TastyKitchen - a Hugging Face Space by ahuang11](https://huggingface.co/spaces/ahuang11/tastykitchen)\n\n[TastyKitchen](https://i.redd.it/hf6fm1ukga9c1.gif)\n\nDocs here: [TastyMap (ahuang11.github.io)](https://ahuang11.github.io/tastymap/)\n\nCode here: [ahuang11/tastymap: colormaps cooked for your palate (github.com)](https://github.com/ahuang11/tastymap)\n\nThere's also a way to have AI suggest a colormap based on a description:\n\n    from tastymap import ai\n    tmap = ai.suggest_tmap(\"Pikachu\")\n    tmap\n\n[Pikachu](https://preview.redd.it/3clppe0pga9c1.png?width=512&amp;format=png&amp;auto=webp&amp;s=82b5570b05cd3b1f07683a7b837860d4442ce9ff)"
    },
    {
        "subreddit": "Python",
        "text": "I\u2019m been doing a lot of at home python training in my free time. I do have an associates degree but it\u2019s in an entirely unrelated field. I\u2019m just wondering what the job market would like for me with no degree in the python field. I\u2019ve heard that some places only care if you actually know the material, regardless of formal education."
    },
    {
        "subreddit": "Python",
        "text": "I am a student of both mathematics and computer science, so I coded up a terminal-based implementation of John Conway's Game of Life. Check it out here:\n\nhttps://github.com/atiumcache/game\\_of\\_life\n\nIt is packaged as an executable for UNIX, so you can quickly get it playing. Or, just view the demo on the README. "
    },
    {
        "subreddit": "Python",
        "text": "Hello there, I'm sharing a project I've been working on for some future robotics projects, and would appreciate some feedback.\n\nIt's called [Voicebox](https://voicebox.readthedocs.io) ([GitHub](https://github.com/austin-bowen/voicebox)), and it's a Python library that essentially provides wrappers for a bunch of different text-to-speech programs/APIs, and includes lots of built-in audio effects like vocoder, ring mod, glitch, etc. It also includes [example voices](https://voicebox.readthedocs.io/en/stable/voicebox.examples.html) like Star Wars battle droid, GlaDOS, and 343 Guilty Spark. Audio samples [here](https://voicebox.readthedocs.io/en/stable/samples.html).\n\nThe \"problem\" I was trying to solve was that a lot of TTS programs sound *too* realistic now, and I want an easy way to make audio from TTS sound more fun/robotic.\n\nThere are also utilities like [`reliable_tts`](https://voicebox.readthedocs.io/en/stable/voicebox.html#voicebox.utils.reliable_tts) and [`ParallelVoicebox`](https://voicebox.readthedocs.io/en/stable/voicebox.voiceboxes.html#voicebox.voiceboxes.parallel.ParallelVoicebox) that make it easy to build responsive and robust TTS systems, which is important for robot projects.\n\nLMK what you think!\n\n&amp;#x200B;\n\nExample: Use gTTS with a vocoder effect to speak in a robotic voice\n\n    from voicebox import SimpleVoicebox\n    from voicebox.tts import gTTS\n    from voicebox.effects import Vocoder, Normalize\n    \n    voicebox = SimpleVoicebox(\n        tts=gTTS(),\n        effects=[Vocoder.build(), Normalize()],\n    )\n    \n    voicebox.say('Hello, world! How are you today?')"
    },
    {
        "subreddit": "Python",
        "text": ""
    },
    {
        "subreddit": "Python",
        "text": "I am a long-time cook and aspiring  developer, so I made a command-line recipe viewer to bypass the ads and blogs that plague recipe websites. It can also save the recipes to markdown. You can even pass in a whole list of URLs to save a bunch of recipes at once. \n\nSimilar to Paprika, except it is free/open-source and you can easily save and share the recipes in markdown format.\n\nCheck it out on GitHub, I would appreciate any feedback/testers:\n\n[https://github.com/atiumcache/pure-recipe](https://github.com/atiumcache/pure-recipe)"
    },
    {
        "subreddit": "Python",
        "text": "Hey all! \ud83d\udc4b Just wanted to share a Python monorepo template I've been working on. It's designed to streamline managing multiple packages in one place. I've incorporated tools like Poetry, Black, mypy, and Ruff for setup and linting, plus my personal touch with [Breadcrumbs](https://github.com/niqodea/breadcrumbs) for cleaner path management. Happy to hear your feedback or ideas!\n\nCheck it out here: https://github.com/niqodea/python-monorepo"
    },
    {
        "subreddit": "Python",
        "text": ""
    },
    {
        "subreddit": "Python",
        "text": "Really, [oreiller](https://www.google.com/search?q=oreiller) is the french word for a pillow.\n\nI always heard about the PIL fork, Pillow but never used it. When I finally used it, I found it to be tedious sometimes. Like including emojis in text and the general programming. I finally got around to create a small library WIP called oreiller \\[[pypi](https://pypi.org/project/oreiller/) | [github](https://github.com/Abdur-RahmaanJ/oreiller)\\]. \n\n&amp;#x200B;\n\nCode demo\n\n&amp;#x200B;\n\nhttps://preview.redd.it/r8ixcd8f579c1.png?width=682&amp;format=png&amp;auto=webp&amp;s=3f137f150c3c1482bd38f5d1d8005fd56057e368"
    },
    {
        "subreddit": "Python",
        "text": "[pyjanitor](https://pyjanitor-devs.github.io/pyjanitor/) has a [conditional_join](https://pyjanitor-devs.github.io/pyjanitor/api/functions/#janitor.functions.conditional_join.conditional_join) function that offers good performance on range joins in Pandas, avoiding the cross/cartesian join. I also wrote a [blog post](https://samukweku.github.io/data-wrangling-blog/notebooks/Fast-and-Efficient-Inequality-Joins-in-Pandas.html), as well as a [pyohio presentation](https://youtu.be/AjdBLOAhgDI?si=jWOP7QlzPpTcr7II) regarding inequality joins in pandas. Feel free to raise an issue on the [pyjanitor github issue page](https://github.com/pyjanitor-devs/pyjanitor/issues) if you encounter any difficulties."
    },
    {
        "subreddit": "Python",
        "text": "Hello! This is Stockstir, a project I did a while ago. I just wanted to share it in case any of you have update suggestions, and also because it might be useful to all of you wanting to get stock prices from your scripts instantly.  \n\n\nThis project allows anyone to instantly get a company stock price from any of your python scripts.  \n\n\nNot only that, but it includes other tools and features to help you gather necessary stock data, such as saving the data to a file, or even a multi-data gathering function with adjustable parameters that include antiBan, random user agent,the delay per request, and more.\n\nYou can get it here: [Stockstir Link](https://github.com/PatzEdi/Stockstir)\n\nAs soon as it is downloaded, you can place this line of code in your script:\n\n```\nimport Stockstir\n\nprice = Stockstir.Tools.getSinglePrice(\"ticker/stockSymbol\")\n\nprint(price)\n```\n\nMake sure to replace what is in between the quotes with the actual Ticker symbol you want to gather the price for.\n\nEdit: Based on the comments that were posted on this thread, I am currently working on a new update for Stockstir. Thank you for the great advice!"
    },
    {
        "subreddit": "Python",
        "text": "*Stop wasting time saving plots manually \u2014 automate it with an extra line of code!*\n\nHopping in to share a bit of Python that's been in my  everyday workflow for the last 2 years. Finally decided it would be  worth the lift to put out there for others to use, too.\n\nI always get bogged down naming things --- and **saving visualizations out of notebooks after finishing up analysis work**  is a particular sore spot. So, I wrote a one-off tool to use plotting  arguments to automatically name plot outputs. It ended up getting reused  over and over, and then eventually became *teeplot.*\n\n*teeplot* wraps plotting calls with logic that **automatically manages matplotlib file output**, picking **meaningful file names** based on the plotting function and semantic plotting variables.\n\n# Example\n\nThis example shows a call to *seaborn*'s **lmplot** dispatched through **teeplot.tee** to save out the visualization as '*teeplots/col=time+hue=sex+viz=lmplot+x=total-bill+y=tip+ext={.pdf,.png}'.*\n\nHere's what a *teeplot*'ed notebook cell and output look like,\n\n    # adapted from seaborn.pydata.org/generated/seaborn.FacetGrid.html \n    import seaborn as sns\n    from teeplot import teeplot as tp  \n    tp.tee(sns.lmplot,  # plotter, then forwarded args/kwargs            \n        sns.load_dataset(\"tips\"), col=\"time\", hue=\"sex\", x=\"total_bill\", y=\"tip\") \n\nhttps://preview.redd.it/sj6f6u69q69c1.png?width=5880&amp;format=png&amp;auto=webp&amp;s=4c684e13bd05336f710545298fb3ff436ffa02f1\n\n&gt;teeplots/col=time+hue=sex+viz=lmplot+x=total-bill+y=tip+ext=.pdfteeplots/col=time+hue=sex+viz=lmplot+x=total-bill+y=tip+ext=.png\n\nThe idea here is to make the process of saving and cataloging plots more *efficient, systematic, and meaningful*, taking the hassle out of manual file management.\n\n# Further Information\n\n*teeplot* can be installed as python3 -m pip install teeplot\n\nThe  library has additional advanced features, as well, including an  interface to globally configure visualization output file types (i.e.,  \".pdf\", \".png\"), etc. You can read more in the project's [*usage guide*](https://github.com/mmore500/teeplot/blob/master/README.rst#usage) and [*API listing*](https://github.com/mmore500/teeplot/blob/master/README.rst#api).\n\n*disclaimer*: am library author"
    },
    {
        "subreddit": "Python",
        "text": "As per today what is the most bulletproof real life python unit testing/mocking framework?\n\nI found after some research that is pytest, but for the mocks which i need to massively use, the standard (= most used library) is unittest.mock with patch or the wrapper pytest-mock?\n\n&amp;#x200B;"
    },
    {
        "subreddit": "Python",
        "text": "Hi everyone!\n\nI\u2019m playing around with this and my goal is set up a service where I can upload any resume/cv then have it broken down into the core parts I\u2019m interested in such as job, employers, job titles, key skills, dates of employment etc that will then populate a standardised template I\u2019ve setup. \n\nCurrent thoughts are to use the ChatGPT API to create a MVP/ proof of concept via python. \nIs the easiest ways to convert the cvs and the template to JSON\u2019s, and pull that data across using tags or should I be considering another approach?\nI\u2019ve been using ChatGPT to analyse CV\u2019s I upload into it and it s been doing pretty good so far in terms of analysing the resumes. \nIf I get this going I would expect to train a model or something like that to increase efficiency. \nObviously the template would need to be dynamic as there\u2019s no set amount of jobs anyone has on their CV/ resume. \n\nThe code I\u2019ve got is rough as so far but I\u2019m keen on how others would approach this situation?\n\nTIA"
    },
    {
        "subreddit": "Python",
        "text": "\nSee the repo here:\nhttps://github.com/Smirkey/powerboxes\n\nSome functions available are NMS (classical or with rtree) distance metrics (IoU, GIoU) and utils (box format conversion, area computation) !\nFeedback would be greatly appreciated, hope it can be useful in your computer vision projects :)"
    },
    {
        "subreddit": "Python",
        "text": "[https://github.com/dafiliks/tortoise](https://github.com/dafiliks/tortoise)\n\nCheck it out, read the README and give feedback, thanks!"
    },
    {
        "subreddit": "Python",
        "text": "I wrote [embuild](https://pypi.org/project/embuild/) \\- a small tool. Also I hooked up a website [listing available libraries](https://embuild.dev/). For now these are mine only [from my curated library repository](https://github.com/g2labs-grzegorz-grzeda/embuild-repository).\n\nHere is the my [embuild GitHub repo link](https://github.com/g2labs-grzegorz-grzeda/embuild), though I encourage you to install it through `pip`.\n\nI was looking for a small and robust tool to handle my embedded C projects. I use CMake for project building. I know there are others ready, like `conan` or `vcpkg` but they were way to overblown. So I decided to write my own.\n\n&amp;#x200B;\n\nGive it a shot and tell me what you think."
    },
    {
        "subreddit": "Python",
        "text": "The popular game Wordle has an alternative version, called Duotrigordle. In this version of the game, instead of trying to solve one word, you are trying to solve 32 words at the same time. A couple weeks ago I set out on a journey to set the world record for the fastest time to complete all 32 words. The world record, 19.62 is incredibly hard to beat, and I realized that I wouldn't be able to do it without practicing certain skills. This is why I created Duotrigordle Practice, a tool to practice specific skills related to this game. Hopefully now I will be able to break the world record. However, this practice tool could be fun for some people, and I figured I might as well share it out to the public. It is still a work in progress, but it's mostly there. I hope you enjoy, and if you have suggestions, bugs, or anything else, feel free to dm me on discord at minestone4306 or post it on github. Here is the link to the github which has all of the source code and download instructions: [https://github.com/dcjvliet/Duotrigordle](https://github.com/dcjvliet/Duotrigordle)"
    },
    {
        "subreddit": "Python",
        "text": ""
    },
    {
        "subreddit": "Python",
        "text": "Hi all!\n\nAfter several months of having no ideas to launch or work on, I'm finally launching a small SaaS to create memorial pages for our beloved ones who have passed away.\n\nTo be honest, I got this idea in the worst scenario. Here's the story...\n\nRecently, one of my family members passed away, and as a software engineer, I felt compelled to use my Python / Django skills to create something meaningful in his honor.\n\nI discovered nice platforms for creating memorial pages, like Cake, Forever Missed, Much Loved, and so forth. However, given my mental state at the time, I felt there were too many steps and overwhelming options to get this done quickly.\n\nSo, I turned to **carrd.com** and created a very basic page with a link to send emails to my wife and me, where you could share condolences, support messages, book recommendations, and so forth.\n\nAfter that, I thought, \"Why not create a platform to build these kinds of pages in just one step and start receiving support from friends and family without feeling pressured to answer the messages?\"\n\nAnd after two weeks, I created [easytribute.com](http://easytribute.com/)\n\nSource code [https://github.com/mariorojas/easytribute](https://github.com/mariorojas/easytribute)\n\nFeel free to take a look, and thank you all for your support and feedback."
    },
    {
        "subreddit": "Python",
        "text": "Good project to play around and explore Django REST features\n\n&amp;#x200B;\n\nRepo -&gt; [https://github.com/damianstone/toogether-backend](https://github.com/damianstone/toogether-backend)\n\nFrontend repo -&gt; [https://github.com/damianstone/toogether-mobile](https://github.com/damianstone/toogether-mobile)\n\n&amp;#x200B;\n\n**Some Django REST features used**\n\n\\- Channels and websockets\n\n\\- Geolocation\n\n\\- Pagination\n\n\\- Auth token\n\n\\- ModelViewSets\n\n&amp;#x200B;\n\n[Figma screen of the app functionalities](https://preview.redd.it/s1yf2ykxmw8c1.png?width=6801&amp;format=png&amp;auto=webp&amp;s=c80e7671cc5430772830b6466cc3dd2f3276c290)\n\n**App features**\n\n\\- login / register using auth token\n\n\\- user profile\n\n\\- matching algorithm\n\n\\- swipe group and single profiles\n\n\\- create group profiles using an invitation code\n\n\\- group chat and 1-1 chats\n\n\\- report and block\n\n\\- recovery password\n\n&amp;#x200B;"
    }
]